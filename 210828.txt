생성자 함수

1. 생성자 함수 이름은 일반적으로 대문자로 시작한다. 이것은 생성자 함수임을 인식하도록 도움을 준다.
2. 프로퍼티 또는 메소드명 앞에 기술한 this는 생성자 함수가 생성할 인스턴스(instance)를 가리킨다.
3. this에 연결(바인딩)되어 있는 프로퍼티와 메소드는 public(외부에서 참조 가능)하다.
4. 생성자 함수 내에서 선언된 일반 변수는 private(외부에서 참조 불가능)하다. 
     즉, 생성자 함수 내부에서는 자유롭게 접근이 가능하나 외부에서 접근할 수 없다.

calss Person {
	var married = true; //Private
	constructor(name, gender) {		// Public
		this.name = name;		// Public
		this.gender = gender;	// Public
		this.married = married;	// Public
	}
	sayHello() {
		console.log('Hi! My name is ' + this.name);
	}
	function aaa() { ~~~ } // 이 안에서만 존재하는 함수 즉, Private
}
//만약
//let kkk = new Person(); 일 때 Person의 ()가 constructor 의 ()가 포함될 수 있다.
//즉,
let kkk = new Person("lee", "male");
//라고 쓸 수 있다.

<script>
var person = {
	'first-name': 'ung-mo',
	// -사용시 변수로 취급 'first-name' 문자로 인식하기 위해 '' 사용
	last_name: 'Lee',		
	gender: 'male',
	f1: 10,
	function: 1
	 // person.function 으로 사용 가능 하지만. 예약어는 사용하지 말 것.
} //각 person.gender 등 으로 묶임 
document.write(person.~~);
</script>


--------------------
delete 연산자를 사용하여 프로퍼티를 삭제할 수 있다.

<script>
var person = {
	'first-name': 'ung-mo',
	last_name: 'Lee',		
	gender: 'male',
	f1: 10,
	function: 1
}

delete person.gender;
document.write(person.gender); // undefined
</script>

------------------
for-in 
for-in 문을 사용하면 객체(배열 포함)에 포함된 모든 프로퍼티에 대해 루프를 수행할 수 있다.


var array = ['one', 'two'];
// index에 배열의 경우 인덱스가 반환된다
for (var index in array) {
  console.log(index + ': ' + array[index]);
}
//var는 전역변수 (함수 밖에서도 적용이 됨) 
//let은 지역변수 (함수 안에서만 적용)
//var는 사용을 지양할 것

--

<script>
var myFF = (function() {
	var myV = 1003;
	function reV() {
		document.write(++myV + "<br>");
	}
	return reV;
})();

myFF(); // 1004
myFF(); // 1005
myFF(); // 1006
</script>

--------------------------------------------- 

PHP

암호화 encode()
























